import type { NextPage } from 'next'
import Head from 'next/head'
import { useEffect, useState } from 'react'
import CartTable from '../components/CartTable'
import ProductCard from '../components/ProductCard'
import styles from '../styles/Home.module.css'

export interface SelectedType {
  code: string,
  name: string,
  price: number,
  discount: boolean
}
// Demo products(product lists)
const PRODUCTS = [
  {
    name: "Red",
    code: "r01",
    price: 32.95,
    image: "/r01.jpg",
    discount: true
  },
  {
    name: "Green",
    code: "g01",
    price: 24.95,
    image: "/g01.jpg",
    discount: false
  },
  {
    name: "Blue",
    code: "01",
    price: 7.95,
    image: "/b01.jpg",
    discount: false
  }
]

const Home: NextPage = () => {
  const [totalPrice, setTotalPrice] = useState(0);

  const [inCartProducts, setInCartProducts] = useState<SelectedType[]>([]);
  const [forceRender, setForceRender] = useState(false);

  // Increase per product in cart
  const addCart = (code: string) => {
    let products = inCartProducts;
    const selected = PRODUCTS.find((item) => item.code === code);
    if (selected) {
      products.push({
        code: code,
        name: selected.name,
        price: selected.price,
        discount: selected.discount
      })
    }
    setInCartProducts(products);
    setForceRender(!forceRender);
  }

  // Reduced per product in cart
  const removeCart = (code: string) => {
    let products = inCartProducts;
    for (var i = 0; i < products.length; i++) {
      if (products[i].code === code) {
        products.splice(i, 1);
        break;
      }
    }
    setInCartProducts(products);
    setForceRender(!forceRender);
  }

  // get sum value from Object array
  const getSum = (items: any, prop: any) => {
    return items.reduce(function (a: any, b: any) {
      return a + b[prop];
    }, 0);
  };

  const calcTotal = (inCartProducts: SelectedType[]) => {
    let subTotal = 0;
    subTotal = getSum(inCartProducts, "price");
    const discountItem = inCartProducts.filter((item) => item.discount);

    // "Half off" on 1 product with discount option - eg: Red Plates
    if (discountItem?.length > 1) {
      subTotal = subTotal - discountItem[0].price / 2;
    }

    // Set Delivery Price
    if (subTotal > 0 && subTotal < 50) {        // Subtotal < 50
      subTotal += 4.95
    } else if (subTotal >= 50 && subTotal < 90) { // 50 <= SubTotal <90
      subTotal += 2.95
    }                           // Subtotal > 90
    setTotalPrice(Math.floor(subTotal * 100) / 100);
  }

  useEffect(() => {
    calcTotal(inCartProducts);
    // eslint-disable-next-line
  }, [JSON.stringify(inCartProducts)])

  return (
    <div className={styles.container}>
      <Head>
        <title>Plates Co</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className="title">
          Plates Co
        </h1>

        <p className={styles.description}>
          Add or remove plates on your cart
        </p>

        <div className={styles.grid}>
          {PRODUCTS.map((item, key) => (
            <ProductCard
              key={key}
              image={item.image}
              title={item.name}
              code={item.code}
              price={item.price}
              onAddCart={addCart}
              onRemoveCart={removeCart}
              inCartProducts={inCartProducts}
            />
          ))}
        </div>
        <div className={styles.total}>
          {inCartProducts && inCartProducts.length !== 0 &&
            <>
              <CartTable inCartProducts={inCartProducts} />
              <button className='btn btn-danger btn-sm' onClick={() => setInCartProducts([])}>REMOVE ALL</button>
              <h2>Total: ${totalPrice.toLocaleString()}</h2>
            </>
          }
        </div>
      </main>
    </div>
  )
}

export default Home